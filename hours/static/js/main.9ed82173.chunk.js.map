{"version":3,"sources":["assets/mainError.jpg","services/api/base.jsx","services/dynamicSortMultiple.jsx","App.js","services/api/connections.jsx","services/weekSeparator.jsx","serviceWorker.js","index.js"],"names":["module","exports","api","axios","create","baseURL","headers","dynamicSort","property","sortOrder","substr","a","b","colors","App","props","getDataFromDb","get","then","res","data","stamps","catch","err","setState","mainError","loading","sort","console","log","state","modal","errorDay","newStamp","day","moment","format","exit","undefined","dayOfWeek","comeback","this","putError","e","type","value","target","map","el","post","success","modalToggle","totalHours","totalTreatment","mostTreatment","mostHours","mostComeback","avgWeekTreatment","length","hours","treatment","sortedTreatment","sortedHours","sortedComeback","arr","labelsArray","filter","push","Set","inner","forEach","label","defArray","sum","stamp","x","name","avg","weekSeparator","Navbar","color","className","Fade","in","Button","disabled","onClick","src","require","alt","tryAgain","Container","fluid","Row","Col","Card","Spinner","toFixed","height","slice","dataKey","options","fillStyle","fill","stroke","strokeWidth","item","itemProps","index","key","Modal","isOpen","toggle","ModalHeader","ModalBody","trySave","Form","FormGroup","Label","for","Input","defaultValue","onChange","changePeriod","id","ModalFooter","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9ed82173.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mainError.9731a3a1.jpg\";","import axios from \"axios\";\r\n\r\nexport function api() {\r\n  return axios.create({\r\n    baseURL: \"https://young-ocean-18509.herokuapp.com/api/v1\",\r\n    headers: {\r\n      \"Access-Control-Allow-Headers\": \"*\"\r\n    }\r\n  });\r\n}\r\n","export function dynamicSort(property) {\r\n  var sortOrder = 1;\r\n  if (property[0] === \"-\") {\r\n    sortOrder = -1;\r\n    property = property.substr(1);\r\n  }\r\n  return function(a, b) {\r\n    /* next line works with strings and numbers,\r\n     * and you may want to customize it to your needs\r\n     */\r\n    var result =\r\n      a[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0;\r\n    return result * sortOrder;\r\n  };\r\n}\r\n\r\nexport function dynamicSortMultiple() {\r\n  /*\r\n   * save the arguments object as it will be overwritten\r\n   * note that arguments object is an array-like object\r\n   * consisting of the names of the properties to sort by\r\n   */\r\n  var props = arguments;\r\n  return function(obj1, obj2) {\r\n    var i = 0,\r\n      result = 0,\r\n      numberOfProperties = props.length;\r\n    /* try getting a different result from 0 (equal)\r\n     * as long as we have extra properties to compare\r\n     */\r\n    while (result === 0 && i < numberOfProperties) {\r\n      result = dynamicSort(props[i])(obj1, obj2);\r\n      i++;\r\n    }\r\n    return result;\r\n  };\r\n}\r\n","import React from 'react';\nimport {\n  Container, Modal, Navbar,\n  ModalBody, Fade,\n  ModalHeader, ModalFooter, Spinner,\n  Row,\n  Col, Card, Button, Form, FormGroup, Label, Input\n} from 'reactstrap'\nimport { weekSeparator } from './services/weekSeparator'\nimport { getStamps, putStamp } from './services/api/connections'\nimport moment from 'moment'\nimport { FaSave, FaRegPlusSquare, FaRegListAlt } from 'react-icons/fa'\nimport {\n  LineSeries, ArcSeries, BarSeries, Arc, Tooltip, AreaSeries,\n  ChartProvider, XAxis, YAxis,\n} from 'rough-charts'\nimport { dynamicSort } from './services/dynamicSortMultiple'\n\nconst colors = ['#d32f2f', '#9e9e9e', '#B0BEC5', '#00bcd4', '#009688', '#ff9800', '#C8E6C9']\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      modal: false,\n      loading: true,\n      errorDay: false,\n      stamps: [],\n      newStamp: {\n        day: moment().format('YYYY-MM-DD'),\n        exit: undefined, dayOfWeek: undefined,\n        comeback: undefined\n      }\n    }\n  }\n  modalToggle() {\n    this.setState({\n      modal: !this.state.modal,\n      errorDay: false,\n      mainError: false,\n      putError: false,\n      newStamp: {\n        day: moment().format('YYYY-MM-DD'),\n        exit: undefined,\n        dayOfWeek: undefined,\n        comeback: undefined\n      }\n    })\n  }\n  changePeriod(e, type) {\n    const { stamps } = this.state\n    let value = e.target.value\n    this.setState({ errorDay: false })\n    if (type === 'day') {\n\n      stamps.map(el => {\n        if (el.day === value) {\n          this.setState({ errorDay: true })\n        }\n      })\n    }\n\n    this.setState({ newStamp: { ...this.state.newStamp, [type]: value } })\n\n  }\n\n\n  trySave() {\n\n    this.setState({ loading: true, putError: false })\n    const { newStamp } = this.state\n    putStamp(newStamp)\n      .then(data => {\n        if (data) {\n          console.log('success');\n          this.setState({ putError: false })\n          this.getDataFromDb()\n          this.modalToggle()\n        } else {\n          console.log('something wron with putting');\n          this.setState({ putError: true })\n        }\n      })\n      .catch(err => {\n        console.log(err, \"put error\");\n      })\n  }\n\n  componentDidMount() {\n    this.getDataFromDb();\n  }\n  getDataFromDb = () => {\n    getStamps()\n      .then(data => {\n        this.setState({ mainError: false, loading: false, stamps: data.sort(dynamicSort('day')) })\n\n      })\n      .catch((err) => {\n        console.log(err, '22');\n        this.setState({ loading: true, mainError: true })\n      })\n  };\n  tryAgain() {\n    this.setState({ mainError: false, loading: true })\n    this.getDataFromDb()\n  }\n\n  render() {\n    let totalHours = 0,\n      totalTreatment = 0,\n      mostTreatment = '-',\n      mostHours = '-',\n      mostComeback = '-',\n      avgWeekTreatment = undefined\n    const { newStamp, modal, putError, errorDay, mainError, loading, stamps } = this.state\n    if (stamps.length > 0) {\n      stamps.map(el => {\n        totalHours += el.hours\n        totalTreatment += el.treatment\n      })\n      let sortedTreatment = stamps.sort(dynamicSort('-treatment'))\n      let sortedHours = stamps.sort(dynamicSort('-hours'))\n      let sortedComeback = stamps.sort(dynamicSort('-comeback'))\n      mostHours = sortedHours[0]\n      mostTreatment = sortedTreatment[0]\n      mostComeback = sortedComeback[0]\n      avgWeekTreatment = weekSeparator(stamps)\n\n\n    }\n\n\n    return (<><Navbar color=\"light\" className=\"text-muted\">\n      <Fade in={!loading}>\n        <Button disabled={mainError ? true : false} color=\"info\" onClick={() => this.modalToggle()}><FaRegPlusSquare /></Button>\n      </Fade>\n      <Button><FaRegListAlt /></Button>\n    </Navbar>\n\n      {mainError ?\n        <div className=\"error\">\n          <img src={require('./assets/mainError.jpg')} alt=\"error db =(\" />\n          <Button onClick={() => this.tryAgain()} color=\"success\">try again?</Button>\n        </div>\n        :\n        <Container fluid className=\"pt-md-4\">\n          <Row>\n            <Col className=\"col-12 my-2\">\n              <Card className=\"p-2 bg-light text-muted d-flex justify-content-center align-items-center\">\n                {loading ?\n                  <Spinner></Spinner> :\n                  stamps.length !== 0 ?\n                    <div className=\"wrap\">\n                      <div className=\"wrap-card\">\n                        <h1>{totalHours.toFixed(1)}</h1>\n                        <span>total hours</span>\n                      </div>\n                      <div className=\"wrap-card\">\n                        <h1>{totalTreatment.toFixed(1)}</h1>\n                        <span>total treatments</span>\n\n                      </div>\n                      <div className=\"wrap-card\">\n                        <h1>{(totalHours / stamps.length).toFixed(2)}</h1>\n                        <span>average hours per day</span>\n\n                      </div>\n                      <div className=\"wrap-card\">\n                        <h1>{(totalTreatment / stamps.length).toFixed(2)}</h1>\n                        <span>average treatments per day</span>\n\n                      </div>\n                    </div> : <div className=\"wrap\">no data... yet</div>}\n              </Card></Col>\n          </Row>\n          <Row className=\"my-2\">\n            <Col>\n              <Card className=\"p-2 bg-light text-muted d-flex justify-content-center align-items-center\">\n                {loading ?\n                  <Spinner></Spinner> :\n                  stamps.length !== 0 ?\n                    <ChartProvider\n                      height={310}\n                      data={stamps.sort(dynamicSort('day')).slice(-15)}\n                    >\n                      <XAxis dataKey=\"day\" />\n                      <YAxis />\n                      <BarSeries dataKey=\"minutes\" options={{ fillStyle: 'solid', fill: '#e91e63' }} />\n\n                      <LineSeries\n                        dataKey=\"minutes\"\n                        options={{\n                          stroke: '#ffeb3b',\n                          strokeWidth: 3,\n                        }}\n                      />\n\n                      <Tooltip />\n                    </ChartProvider> : \"no data\"\n                }\n              </Card>\n            </Col>\n          </Row>\n          <Row>\n            <Col className=\"col-12 my-2\">\n              <Card className=\"p-2 bg-light text-muted d-flex justify-content-center align-items-center\">\n                {loading ?\n                  <Spinner></Spinner> :\n                  stamps.length !== 0 ?\n                    <div className=\"wrap\">\n\n                      <div className=\"wrap-card\">\n                        <h1>{mostTreatment.day}</h1>\n                        <span>most treatment ({mostTreatment.treatment})</span>\n                      </div>\n\n                      <div className=\"wrap-card\">\n                        <h1>{mostHours.day}</h1>\n                        <span>most hours ({mostHours.hours})</span>\n\n                      </div>\n                      <div className=\"wrap-card\">\n                        <h1>{mostComeback.day}</h1>\n                        <span>most comeback ({mostHours.comeback})</span>\n\n                      </div>\n                    </div> : <div className=\"wrap\">no data... yet</div>}\n              </Card></Col>\n          </Row>\n          <Row className=\"my-2\">\n            <Col>\n              <Card className=\"p-2 bg-light text-muted d-flex justify-content-center align-items-center\">\n                {loading ?\n                  <Spinner></Spinner> :\n                  stamps.length !== 0 ?\n                    <ChartProvider\n                      height={300}\n                      data={stamps.sort(dynamicSort('day')).slice(-15)}\n                    >\n                      <AreaSeries\n                        dataKey=\"hours\"\n                        options={{ stroke: '#B0BEC5' }}\n                      />\n                      <AreaSeries\n                        dataKey=\"treatment\"\n                        options={{ stroke: '#d32f2f' }}\n                      />\n\n                      <YAxis />\n                      <XAxis\n                        dataKey=\"day\"\n                      />\n\n                      <Tooltip />\n                    </ChartProvider> : \"no data\"\n                }\n              </Card>\n            </Col>\n          </Row>\n\n          <Row className=\"my-2\">\n            <Col>\n              <Card className=\"p-2 bg-light text-muted d-flex justify-content-center align-items-center\">\n                {loading ?\n                  <Spinner></Spinner> :\n                  stamps.length !== 0 ?\n\n                    <ChartProvider\n                      height={300}\n                      data={avgWeekTreatment}\n                    >\n                      <ArcSeries\n                        dataKey=\"avg\"\n                      >\n                        {\n                          (item, itemProps, index) => (\n                            <Arc\n                              {...itemProps}\n                              key={index}\n                              options={{\n                                fill: colors[index],\n                              }}\n                              \n                            />\n                          )\n                        }\n                      </ArcSeries>\n\n                      <Tooltip>\n                        {({ name, avg }) => `${name} average treatment: ${avg}`}\n                      </Tooltip>\n                    </ChartProvider> : \"no data\"\n                }\n              </Card>\n            </Col>\n          </Row>\n\n          <Modal isOpen={modal} toggle={() => this.modalToggle()}>\n            <ModalHeader className=\"text-white bg-dark\">Add new stamp</ModalHeader>\n            <ModalBody className=\"text-white bg-dark\">\n              {putError ?\n                <div className=\"errorPut\">\n                  some problems with putting new stamp\n                <Button onClick={() => this.trySave()}>try again?</Button>\n                </div>\n                :\n                <Form>\n                  <FormGroup>\n                    <Row >\n                      <Col className=\"col-12 mb-2\">\n                        <Label for=\"day\">day</Label>\n                        <Input className=\"text-center\" defaultValue={newStamp.day} onChange={(e) => this.changePeriod(e, 'day')} type=\"date\" name=\"day\" id=\"day\" />\n                      </Col>\n                      <Col className=\"col-12\">\n                        <Label for=\"exit\">exit</Label>\n                        <Input defaultValue={newStamp.exit}\n                          className=\"text-center\"\n                          onChange={(e) => this.changePeriod(e, 'exit')}\n                          type=\"time\"\n                          name=\"exit\"\n                          id=\"exit\" />\n                      </Col>\n\n                    </Row>\n\n                  </FormGroup>\n                  <FormGroup>\n\n                    <Label for=\"comeback\">comeback</Label>\n                    <Input\n                      className=\"text-center\"\n                      defaultValue={newStamp.comeback}\n                      onChange={(e) => this.changePeriod(e, 'comeback')}\n                      type=\"time\"\n                      name=\"comeback\"\n                      id=\"comeback\" />\n\n                  </FormGroup>\n                </Form>}\n\n            </ModalBody>\n            <ModalFooter className=\"text-white bg-dark\">\n              <Fade in={errorDay}><span>this stamp already exist </span> </Fade>\n              <Fade in={!errorDay}>\n                <Button onClick={() => this.trySave()} disabled={newStamp.comeback === undefined || newStamp.exit === undefined ? true : false} className=\"btn-success\"><FaSave /></Button>\n              </Fade>\n              <Button color=\"secondary\" onClick={() => this.modalToggle()}>Cancel</Button>\n            </ModalFooter>\n          </Modal>\n        </Container>\n      }\n    </>\n    );\n  }\n}\n\nexport default App;\n","import { api } from \"./base\";\r\n\r\nexport function getStamps() {\r\n  return api()\r\n    .get(\"getStamps\")\r\n    .then(res => res.data.stamps)\r\n    .catch(err => err);\r\n}\r\n\r\nexport function putStamp(data) {\r\n  return api()\r\n    .post(\"putStamp\", data)\r\n    .then(res => res.data.success)\r\n\r\n    .catch(err => err);\r\n}\r\nexport function editMaterial(token, material) {\r\n  return api(token)\r\n    .post(\"editMaterial\", { material })\r\n    .then(res => res.data.success)\r\n    .catch(err => err);\r\n}\r\n\r\nexport function deleteMaterial(token, id) {\r\n  return api(token)\r\n    .post(\"deleteMaterial\", { id })\r\n    .then(res => res.data.success)\r\n    .catch(err => err);\r\n}\r\n\r\n//get all users\r\nexport function getUsers(token) {\r\n  return api(token)\r\n    .get(\"getUsers\")\r\n    .then(res => res.data.users)\r\n    .catch(err => err);\r\n}\r\n\r\nexport function logIn(token, authdata) {\r\n  return api(token)\r\n    .post(\"logIn\", { authdata })\r\n    .then(res => res.data)\r\n    .catch(err => err);\r\n}\r\n\r\n//edit user by id\r\nexport function editUser(token, user) {\r\n  return api(token)\r\n    .post(\"editUser\", { user })\r\n    .then(res => res.data.success)\r\n    .catch(err => err);\r\n}\r\n//create user\r\nexport function putUser(data) {\r\n  return api()\r\n    .post(\"putUser\", data)\r\n    .then(res => res.data.success)\r\n    .catch(err => err);\r\n}\r\n// get all responsibles\r\nexport function getResponsibles(token) {\r\n  return api(token)\r\n    .get(\"getResponsibles\")\r\n    .then(res => res.data.data)\r\n    .catch(err => err);\r\n}\r\n//create responsible\r\nexport function putResponsible(token, data) {\r\n  return api(token)\r\n    .post(\"putResponsible\", data)\r\n    .then(res => res.data.success)\r\n    .catch(err => err);\r\n}\r\n//edit one responsible\r\nexport function editResponsible(token, resp) {\r\n  return api(token)\r\n    .post(\"editResponsible\", { resp })\r\n    .then(res => res.data.success)\r\n    .catch(err => err);\r\n}\r\n\r\n//delete responsible by _id\r\nexport function deleteResponsible(token, id) {\r\n  return api(token)\r\n    .post(\"deleteResponsible\", { id })\r\n    .then(res => res.data.success)\r\n    .catch(err => err);\r\n}\r\n\r\nexport function deleteUser(token, id) {\r\n  return api(token)\r\n    .post(\"deleteUser\", { id })\r\n    .then(res => res.data.success)\r\n    .catch(err => err);\r\n}\r\n","export function weekSeparator(arr) {\r\n  let labelsArray = [];\r\n  arr.filter(el => {\r\n    labelsArray.push(el.dayOfWeek);\r\n  });\r\n  labelsArray = new Set(labelsArray);\r\n  labelsArray = [...labelsArray];\r\n \r\n  let inner = []\r\n  labelsArray.forEach(label => {\r\n   \r\n    let defArray = [];\r\n    let sum = 0;\r\n    arr.map(stamp => {\r\n      if (stamp.dayOfWeek === label) {\r\n        sum += stamp.treatment;\r\n        defArray.push(stamp.treatment);\r\n      }\r\n    });\r\n    let x = {}\r\n    x.name = label\r\n    x.avg = sum / defArray.length;\r\n    inner.push(x)\r\n  });\r\n\r\n  return inner;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}